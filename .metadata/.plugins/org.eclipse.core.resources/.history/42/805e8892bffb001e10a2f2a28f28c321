<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- @Controller와 같은 애노테이션을 활성화 해주는 요소 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.kh.spring" />
	<!-- base-package에서 설정된 패키지와 그 이하에 있는 모든 패키지를 감시해서
	     등록 가능한 도구(@Component)를 모두 찾아서 자동으로 빈으로 등록해주는 설정 -->
	
	<!--  
		Mapping 해주는 방법 (((((과거)))))
		handlerMapping을 위해서 어떤 url이 왔을 때 어떤 Controller를 구동시킬건지 알아내야함
		
		bean으로 모두 등록
		
		<beans: bean class="com.kh.spring.member.controller.LoginController" id="loginController">
		<beans: bean class="com.kh.spring.member.controller.LogoutController" id="logoutController"> 
		.....
		
		ex) login.member => loginController // logout.member => logoutController
		
		>> DispatcherServlet >> 
		"" 핸들러 매핑 "" 

	1. 과거) 핸들러 매핑을 해주기 위해 모두 bean 등록(클래스, id속성값 등)
		ㄴ 장점 : xml문서 내에 한눈에 볼 수 있기 때문에 관리의 편의성이 높음
		ㄴ 단점 : bean개수가 많으면 오히려 보기가 힘들다.
	
	2. 현재))
	          애노테이션 방식
		=> component-scan에서 지정한 감시할 패키지의 하위의 모든 클래스들을 스캔해서
		    @Controller와 같이 MVC애노테이션이 붙은 클래스들을 자동으로 Bean 등록

		내가 직접 만든 클래스가 아니라 컴파일이 끝난 .class파일일 경우
		수정이 불가능하므로 코드상으로 애노테이션을 
	
	
	
	   
	-->     
	     
	
	
	
</beans:beans>
