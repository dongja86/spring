package com.kh.spring.member.controller;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.kh.spring.member.model.service.MemberService;
import com.kh.spring.member.model.vo.Member;

@Controller
public class MemberController {
	
	// Spring이 D.I(Dependency Injection)을 이용한 방식 // 다형성을 쓸 수 있다.(객체간 의존도를 낮춘다)********
	
	// Filed Injection
	 
	
	@Autowired // Autowired의 역할은 해당 타입을 bean에서 찾아 주입
	private MemberService memberService;
	// @Autowired가 달린 애노테이션을 달아서
	// 필드와 일치하는 ****타입***** 을 Bean객체중에 검색해서 필드로 주입해줌!!
	
	
	
	
	
	
	
	
	
	/*
	@RequestMapping(value="login.member") // RequestMapping타입의 애노테이션을 붙임으로써 HandlerMapping을 등록
	public void login() {
		
		//System.out.println("로그인 요청을 보냈니~~~??");
		
		
	}
	*/
	
	/*
	 * Spring에서 요청 시 전달값(Parameter)을 받는 방법
	 * 
	 * 1. HttpServletRequest을 이용해서 전달받기(기존의 JSP/Servlet방식)
	 * 
	 * 	해당 핸들러의 매개변수로 HttpServletRequest타입을 작성해두면
	 *  DispatcherServlet이 해당 메소드 호출할 때 request객체를 전달해서 매개변수로 주입해줌
	 * 
	 * 
	 * 
	 * 
	 */
	/*   1번 방법
	@RequestMapping(value="login.member")
	public String login(HttpServletRequest request) {
		
		 String id = request.getParameter("id");
		 String pwd = request.getParameter("pwd");
		 System.out.println("id : " + id);
		 System.out.println("pwd : " + pwd);
		
		
		return "main";
	}
	*/
	
	/*
	 * 2. @RequestParam 애노테이션을 이용하는 방법
	 * 
	 *  request.getParamter("키")로 밸류를 뽑아오는 역할을 대신해주는 애노테이션
	 *  value속성의 값으로 jsp에서 작성한 name 속성값을 적으면 알아서 해당 매개변수로 주입을 해줌
	 *  만약, 넘어온 값이 비어있는 형태라면 defaultValue속성으로 기본값을 지정할 수 있음
	 * 
	 * 
	 */
	/*
	@RequestMapping(value="login.member")
	public String login(@RequestParam(value="id", defaultValue="user01") String id,
						@RequestParam(value="pwd") String pwd) {
		
		System.out.println("id : " + id);
		System.out.println("pwd : " + pwd);
		
		
		return "main";
	}
	*/
	
	/*
	 * 3. RequestParam애노테이션을 생략하는 방법
	 * 
	 * 단, 매개변수명을 jsp의 name속성값(요청 시 전달하는 값의 키값)과 동일하게 세팅해둬야 자동으로 값이 주입
	 * 단점이라고 한다면 위에서 사용했던 defaultValue속성을 사용할 수 없음
	 * 
	 */
	/*
	@RequestMapping(value="login.member")
	public String login(String id, String pwd) {
		
		//System.out.println("id : " + id);
		//System.out.println("pwd : " + pwd);
		Member member = new Member();
		member.setUserId(id);
		member.setUserPwd(pwd);
		
		
		return "main";
	}
	*/
	
	/*
	 * 	4. 커멘드 객체 방식
	 * 
	 * *** 반드시 !! 
	 * name속성값과 담고자하는 필드명과 동일하게 작성해야함!!!!!!
	 * +
	 * 해당 VO클래스에 기본생성자가 꼭 존재해야함!!
	 * + 
	 * VO클래스에 setter가 존재해야함!!
	 * 
	 * 해당 메서드의 매개변수로 
	 * 요청 시 전달값을 담고자하는 클래스의 타입으로 세팅 후 
	 * 요청 시 전달값의 키값(jsp의 name속성값)을 클래스의 담고자하는 필드명으로 작성
	 * 
	 * 
	 * =>
	 * 
	 * 스프링 컨테이너가 해당 객체를 기본생성자를 통해서 생성한 후 내부적으로 setter메소드를 찾아서 요청 시 전달값을 해당 필드에 담아줌
	 * => (setter injection)
	 * 
	 * 
	 * 
	 */
	/*
	 * 
	 
	@RequestMapping("login.member")
	public String login(Member member) {
		
		//System.out.println(member);
		
		//new MemberServiceImpl().login(member);
		
		/*
		 * Service클래스의 수정이 일어날 경우 Service클래스를 의존하고 있던 Controller가 영향을 받게됨!
		 * 
		 * 
		 * 
		 */
		//Member loginMember = memberService.login(member);
		
		//if(loginMember == null) {
		//	System.out.println("로그인실패");
		//	
		//} else {
		//	System.out.println("로그인성공");
		//}
		
		
		//return "main";
		
		//*/
		// ViewResolve
		// prefix value : "WEB-INF/views/"
		// suffix value : ".jsp:
		// 자동완성 결과 = prefix + "main" + suffix
		// ==> WEB-INF/views/main.jsp
		
		/*
		 * Client의 요청 처리 후 응답데이터를 담아서 응답페이지로 포워딩 또는 url재요청 하는 방법
		 * 
		 * 1. Spring에서 제공하는 Model객체를 사용하는 방법 (request를 대체)
		 * 포워딩할 응답 뷰로 전달하고자 하는 데이터를 맵형식(key-value)으로 담을 수 있는 영역
		 * Model객체는 requestScope
		 * 
		 * 단, setAttribute가 아닌 addAttribute메소드를 호출해야함
		 * 
		 */
		/*
		@RequestMapping("login.member")
		public String loginMember(Member member, Model model, HttpSession session) {
			
			Member loginMember = memberService.login(member);
			
			if(loginMember == null) { // 로그인 실패 => 에러문구를 requestScope에 담아서 에러페이지로 포워딩
				
				model.addAttribute("errorMsg", "로그인에 실패했어요");
				
				/*
				 * forwarding~(파일경로를 포함한 파일명을 제시)
				 * 
				 * errorPage.jsp
				 * 
				 *\/WEB-INF/views/common/errorPage.jsp
				 *
				 * return 하면서 DispatcherServlet -> ViewResolver 이동
				 * 
				 * 	- prefix : /WEB-INF/views/
				 * 
				 *  - 중간 : return한 문자열
				 *  
				 *  - suffix : .jsp
				 *  
				 *  -- 남는 문자열 : common/errorPage
				 * 
				 * 
				 * 
				 */
	/*
				return "common/errorPage";
				
			} else {// 정보가 있다 => loginMember를 sessionScope에 담고 넘기기, 메소드 안에서 필요한 부분이 있으면 Spring에 요청. 매개변수 자리에에 입력
				
				session.setAttribute("loginUser", loginMember);
				
				//return "main"; // => forwarding => 적합하지 않음
				
				// sendRedirect 이용
				// localhost:8001/spring
				// redirect: 요청할 url
				
				return "redirect:/";
			}
			
		}
		
	*/	
	
	
	/*
	 * 2. ModelAndView타입을 사용하는 방법
	 * 
	 * Model은 데이터를 key-value세트로 담을 수 있는 공간
	 * View는 응답 뷰에 대한 정보를 담을 수 있는 공간
	 * 
	 * Model객체와 View(인터페이스)가 결합된 형태의 객체
	 *  view는 단독으로 사용 불가능
	 *
	 */
	
	@RequestMapping("login.member")
	public ModelAndView login(Member member, HttpSession session, ModelAndView mv) {
		
		Member loginUser = memberService.login(member);
		
		if(loginUser != null) { // view정보를 담고
			session.setAttribute("loginUser", loginUser); // data는 session에
			
			mv.setViewName("redirect:/"); // view 정보는 mv에 ViewName
			
			
		} else {
			mv.addObject("errorMsg", "로그인 실패");
			mv.setViewName("common/errorPage");
		}
		
		return mv;
		
	}
	
	@RequestMapping("logout.member")
	public String logoutMember(HttpSession session) {
		
		session.removeAttribute("loginUser");
		return "redirect:/";
		
	}
	
	@RequestMapping("enrrolForm.member")
	public String enrollForm() {
		
		// 			/WEB-INF/views/member/memberEnrollForm.jsp
		// prefix : /WEB-INF/views/
		// suffix : .jsp
		
		return "member/memberEnrollForm";
	}
	
	@RequestMapping("insert.member")
	public ModelAndView insertMember() {
		
		
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
